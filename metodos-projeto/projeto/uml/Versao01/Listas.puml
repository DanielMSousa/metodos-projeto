@startuml

package "UsuarioAbstracao.Listas" {
    abstract class UsuarioDisponivelLista<T> {
        - listaUsuarios: List<T>
        - tamanhoLista: int
        + getListaUsuarios(): List<T>
        + setListaUsuarios(listaUsuarios: List<T>): void
        + getTamanhoLista(): int
        + setTamanhoLista(tamanho: int): void
        {abstract} + adicionarUsuario(usuario: T): void
        {abstract} + removerUsuario(usuario: T): void
    }
    abstract class UsuariosNaoDisponivelLista<T> {
        - listaUsuarios: List<T>
        - tamanhoLista: int
        + getListaUsuarios(): List<T>
        + setListaUsuarios(listaUsuarios: List<T>): void
        + getTamanhoLista(): int
        + setTamanhoLista(tamanho: int): void
        {abstract} + adicionarUsuario(usuario: T): void
        {abstract} + removerUsuario(usuario: T): void
    }
    interface UsuarioListaModelInterface<T> {
        + getListaUsuarios(): List<T>
        + setListaUsuarios(listaUsuarios: List<T>): void
        + getTamanhoLista(): int
        + setTamanhoLista(tamanho: int): void
    }
    class UsuarioListaModel<T> {
        - listaProgramadores: List<T>
        - tamanhoLista: int
        + getListaUsuarios(): List<T>
        + setListaUsuarios(listaUsuarios: List<T>): void
        + getTamanhoLista(): int
        + setTamanhoLista(tamanho: int): void
    }
}

package "Programador.Listas" {
    class ControllerProgramadoresDisponiveis {
        - instance: ControllerProgramadoresDisponiveis
        - lista: ProgramadoresDisponiveis
        + getInstance(): ControllerProgramadoresDisponiveis
        + adicionarUsuario(usuario: ProgramadorModel): void
        + removerUsuario(usuario: ProgramadorModel): void
        + getUsuarioPorNome(nome: String): ProgramadorModel
        + getListaUsuarios(): List<ProgramadorModel>
        + listarProgramadoresDisponiveis(): void
    }
    class ControllerProgramadoresEmProjeto {
        - instance: ControllerProgramadoresEmProjeto
        - lista: ProgramadoresEmProjeto
        + getInstance(): ControllerProgramadoresEmProjeto
        + adicionarUsuario(usuario: ProgramadorModel): void
        + removerUsuario(usuario: ProgramadorModel): void
        + getUsuarioPorNome(nome: String): ProgramadorModel
        + getListaUsuarios(): List<ProgramadorModel>
        + listarProgramadoresEmProjeto(): void
    }
    class ProgramadoresDisponiveis {
        - instance: ProgramadoresDisponiveis
        - listaProgramadores: List<ProgramadorModel>
        + getInstance(listaProgramadores: List<ProgramadorModel>): ProgramadoresDisponiveis
    }
    class ProgramadoresEmProjeto {
        - instance: ProgramadoresEmProjeto
        - listaProgramadores: List<ProgramadorModel>
        + getInstance(listaProgramadores: List<ProgramadorModel>): ProgramadoresEmProjeto
    }
}

package "Gerente.Listas" {
    class GerentesEmProjeto {
        - instance: GerentesEmProjeto
        - listaGerentes: List<GerenteModel>
        + getInstance(listaGerentes: List<GerenteModel>): GerentesEmProjeto
    }
    class GerentesDisponivel {
        - instance: GerentesDisponivel
        - listaGerentes: List<GerenteModel>
        + getInstance(listaGerentes: List<GerenteModel>): GerentesDisponivel
    }
    class ControllerGerentesDisponiveis {
        - instance: ControllerGerentesDisponiveis
        - lista: GerentesDisponivel
        + getInstance(): ControllerGerentesDisponiveis
        + adicionarUsuario(usuario: GerenteModel): void
        + removerUsuario(usuario: GerenteModel): void
        + getUsuarioPorNome(nome: String): GerenteModel
        + getListaUsuarios(): List<GerenteModel>
        + listarGerentesDisponivel(): void
    }
    class ControllerGerenteEmProjeto {
        - instance: ControllerGerenteEmProjeto
        - lista: GerentesEmProjeto
        + getInstance(): ControllerGerenteEmProjeto
        + adicionarUsuario(usuario: GerenteModel): void
        + removerUsuario(usuario: GerenteModel): void
        + getUsuarioPorNome(nome: String): GerenteModel
        + getListaUsuarios(): List<GerenteModel>
        + listarGerentesDisponivel(): void
    }
}

package "AnalistaSistemas.Listas" {
    class ControllerAnalistaSistemasEmProjeto {
        - instance: ControllerAnalistaSistemasEmProjeto
        - lista: AnalistaSistemasEmProjeto
        + getInstance(): ControllerAnalistaSistemasEmProjeto
        + adicionarUsuario(usuario: AnalistaSistemasModel): void
        + removerUsuario(usuario: AnalistaSistemasModel): void
        + getUsuarioPorNome(nome: String): AnalistaSistemasModel
        + getListaUsuarios(): List<AnalistaSistemasModel>
        + listarAnalistaSistemasDisponivel(): void
    }
    class ControllerAnalistaSistemasDisponivel {
        - instance: ControllerAnalistaSistemasDisponivel
        - lista: AnalistaSistemasDisponivel
        + getInstance(): ControllerAnalistaSistemasDisponivel
        + adicionarUsuario(usuario: AnalistaSistemasModel): void
        + removerUsuario(usuario: AnalistaSistemasModel): void
        + getUsuarioPorNome(nome: String): AnalistaSistemasModel
        + getListaUsuarios(): List<AnalistaSistemasModel>
        + listarAnalistaSistemasDisponivel(): void
    }
    class AnalistaSistemasEmProjeto {
        - instance: AnalistaSistemasEmProjeto
        - listaAnalistas: List<AnalistaSistemasModel>
        + getInstance(listaAnalistas: List<AnalistaSistemasModel>): AnalistaSistemasEmProjeto
    }
    class AnalistaSistemasDisponivel {
        - instance: AnalistaSistemasDisponivel
        - listaAnalistas: List<AnalistaSistemasModel>
        + getInstance(listaAnalistas: List<AnalistaSistemasModel>): AnalistaSistemasDisponivel
    }
}
UsuarioDisponivelLista --|> UsuarioListaModelInterface

UsuariosNaoDisponivelLista --|> UsuarioListaModelInterface
UsuariosNaoDisponivelLista <|-- ControllerProgramadoresEmProjeto
UsuariosNaoDisponivelLista <|-- ControllerGerenteEmProjeto
UsuariosNaoDisponivelLista <|-- ControllerAnalistaSistemasEmProjeto

UsuarioListaModelInterface <|.. UsuarioListaModel
UsuarioListaModel <|.. ProgramadoresDisponiveis
UsuarioListaModel <|.. ProgramadoresEmProjeto
UsuarioListaModel <|.. GerentesEmProjeto
UsuarioListaModel <|.. GerentesDisponivel
UsuarioListaModel <|.. AnalistaSistemasEmProjeto
UsuarioListaModel <|.. AnalistaSistemasDisponivel

ControllerProgramadoresDisponiveis --|> UsuarioDisponivelLista
ControllerProgramadoresEmProjeto --|> UsuariosNaoDisponivelLista
ControllerGerentesDisponiveis --|> UsuarioDisponivelLista
ControllerGerenteEmProjeto --|> UsuariosNaoDisponivelLista
ControllerAnalistaSistemasDisponivel --|> UsuarioDisponivelLista
ControllerAnalistaSistemasEmProjeto --|> UsuariosNaoDisponivelLista

ControllerProgramadoresDisponiveis o-- ProgramadoresDisponiveis
ControllerProgramadoresEmProjeto o-- ProgramadoresEmProjeto
ControllerGerentesDisponiveis o-- GerentesDisponivel
ControllerGerenteEmProjeto o-- GerentesEmProjeto
ControllerAnalistaSistemasDisponivel o-- AnalistaSistemasDisponivel
ControllerAnalistaSistemasEmProjeto o-- AnalistaSistemasEmProjeto

@enduml